unit uCtrlClientes;

interface
uses MidasLib, Windows, Messages, SysUtils, System.Classes, Graphics, Controls, Forms, Dialogs,
     Gauges, DB,  SqlExpr, DBClient, ddb, ddmCliente, eInterface.Model.Interfaces;

type

  TCtrlClientes = class(TObject)

  private
    FMensagemInfo   : string;
    FId_Cliente     : Integer;
    FId_Empresa     : Integer;
    FNome           : String;
    FEmpresa        : String;
    FTipoPessoa     : String;
    FTelefones      : String;
    FDocumento      : String;
    FRG             : String;
    FUF             : String;
    FDataNascimento : String;
    FDataCadastro   : String;

    function GetMensagemInfo   : string;
    function GetDataCadastro   : String;
    function GetDataNascimento : String;
    function GetTelefones      : String;
    function GetDocumento      : String;
    function GetId_Cliente     : Integer;
    function GetId_Empresa     : Integer;
    function GetNome           : String;
    function GetRG             : String;
    function GetTipoPessoa     : String;
    function GetUF             : String;

    procedure SetMensagemInfo(const Value: string);
    procedure SetDataCadastro(const Value: String);
    procedure SetDataNascimento(const Value: String);
    procedure SetTelefones(const Value: String);
    procedure SetDocumento(const Value: String);
    procedure SetId_Cliente(const Value: Integer);
    procedure SetId_Empresa(const Value: Integer);
    procedure SetNome(const Value: String);
    procedure SetRG(const Value: String);
    procedure SetTipoPessoa(const Value: String);
    procedure SetUF(const Value: String);
    function GetEmpresa: String;
    procedure SetEmpresa(const Value: String);


  public

    DataModule : TdmCliente;

    procedure IniciarProperty(Action: Boolean);
    function Processar(Processo: Integer): Boolean;
    function ValidarDataNascimento: Boolean;
    function ValidarRG: Boolean;

    function MontaSqlCliente(AId_Cliente : Integer = -9): string;
    function MontaSqlProcurarCliente(AId_Cliente: Integer): string;

    function TableIsEmpty(const Table: string): Boolean;

    function ApplyCdsInsertCliente(var AId_Cliente: Integer): Boolean;
    function ApplyCdsEditCliente(AId_Cliente: Integer): Boolean;
    function ApplyCdsDeleteCliente(AId_Cliente: Integer): Boolean;

    property MensagemInfo   : String  read GetMensagemInfo   write SetMensagemInfo;

    property Id_Cliente     : Integer read GetId_Cliente     write SetId_Cliente;
    property Id_Empresa     : Integer read GetId_Empresa     write SetId_Empresa;
    property Nome           : String  read GetNome           write SetNome;
    property Empresa        : String  read GetEmpresa        write SetEmpresa;
    property TipoPessoa     : String  read GetTipoPessoa     write SetTipoPessoa;
    property Telefones      : String  read GetTelefones      write SetTelefones;
    property Documento      : String  read GetDocumento      write SetDocumento;
    property RG             : String  read GetRG             write SetRG;
    property UF             : String  read GetUF             write SetUF;
    property DataNascimento : String  read GetDataNascimento write SetDataNascimento;
    property DataCadastro   : String  read GetDataCadastro   write SetDataCadastro;

    constructor Create;
    destructor Destroy; override;

  end;

implementation

uses uSistemaIB, uFuncoes;

const
     MENSAGEMIDADE = 'Não é permitido cadastrar cliente (Pessoa Física) ' + #13 + #10 + 'menor de idade no estado do Paraná ou São Paulo';
     MENSAGEMRG   = 'Não é permitido cadastrar cliente (Pessoa Física) ' + #13 + #10 + 'sem o RG no Distrito Federal';


{ TCtrlClientes }

constructor TCtrlClientes.Create;
begin
  DataModule      := TdmCliente.Create(NIL);
  IniciarProperty(False);
end;

destructor TCtrlClientes.Destroy;
begin
  inherited;
  FreeAndNil(DataModule);
end;

procedure TCtrlClientes.IniciarProperty(Action: Boolean);
begin
  if not Action then
  begin
    FMensagemInfo   := '';
    FId_Cliente     := 0;
    FId_Empresa     := 0;
    FNome           := '';
    FEmpresa        := '';
    FTipoPessoa     := '';
    FTelefones      := '';
    FDocumento      := '';
    FRG             := '';
    FUF             := '';
    FDataNascimento := '';
    FDataCadastro   := '';
  end
  else
  begin
    FMensagemInfo := 'Sucesso';
    FId_Cliente     := DataModule.qryCliente.FieldByName('ID_CLIENTE').AsInteger;
    FId_Empresa     := DataModule.qryCliente.FieldByName('ID_EMPRESA').AsInteger;
    FNome           := DataModule.qryCliente.FieldByName('NOME').AsString;
    FEmpresa        := DataModule.qryCliente.FieldByName('EMPRESA').AsString;
    FTipoPessoa     := DataModule.qryCliente.FieldByName('TIPOPESSOA').AsString;
    FTelefones      := DataModule.qryCliente.FieldByName('TELEFONES').AsString;
    FDocumento      := DataModule.qryCliente.FieldByName('DOCUMENTO').AsString;
    FRG             := DataModule.qryCliente.FieldByName('RG').AsString;
    FUF             := DataModule.qryCliente.FieldByName('UF').AsString;

    if FTipoPessoa = 'F' then
      FDataNascimento := FormatDateTime('DD.MM.YYYY'         , DataModule.qryCliente.FieldByName('DATANASCIMENTO').AsDateTime);;

    FDataCadastro   := FormatDateTime('DD.MM.YYYY HH:MM:SS', DataModule.qryCliente.FieldByName('DATACADASTRO').AsDateTime);
  end;
end;

function TCtrlClientes.MontaSqlCliente(AId_Cliente: integer): string;
var
    sql  : TStringList;
begin
  sql := TStringList.Create;
  try
    sql.Clear;
    sql.Add('SELECT CL.ID_CLIENTE,              ');
    sql.Add('       CL.ID_EMPRESA,              ');
    sql.Add('       CL.NOME,                    ');
    sql.Add('       EM.NOMEFANTASIA AS EMPRESA, ');
    sql.Add('       CL.TIPOPESSOA,              ');
    sql.Add('       CL.TELEFONES,               ');
    sql.Add('       CL.DOCUMENTO,               ');
    sql.Add('       CL.RG,                      ');
    sql.Add('       CL.UF,                      ');
    sql.Add('       CL.DATANASCIMENTO,          ');
    sql.Add('       CL.DATACADASTRO             ');
    sql.Add('FROM CLIENTES CL                   ');
    sql.Add('     INNER JOIN EMPRESAS EM ON EM.ID_EMPRESA = CL.ID_EMPRESA ');

    if (AId_Cliente <> -9)then
    begin
      sql.Add('                          ');
      sql.Add('WHERE CL.ID_CLIENTE = ' + IntToStr(AId_Cliente));
    end;

    sql.Add('                            ');
    sql.Add('ORDER BY CL.NOME ');

    if DebugHook <> 0 then
      Sql.SaveToFile('C:\EcoCentauro\Consultas\MontaSqlCliente.Txt');

    Result := sql.Text;
  finally
    FreeAndNil(sql);
  end;
end;

function TCtrlClientes.MontaSqlProcurarCliente(AId_Cliente: Integer): string;
var
    sql  : TStringList;
begin
  sql := TStringList.Create;
  try
    sql.Clear;
    sql.Add('SELECT ID_CLIENTE AS IDRETORNO, ');
    sql.Add('       NOME,                    ');
    sql.Add('       DOCUMENTO,               ');
    sql.Add('       DATANASCIMENTO           ');
    sql.Add('FROM CLIENTES                   ');
    if (AId_Cliente <> -9) then
    begin
      sql.Add('WHERE ID_CLIENTE = ' + IntToStr(AId_Cliente));
      sql.Add('                      ');
    end;
    sql.Add('ORDER BY NOME  ');

    if DebugHook <> 0 then
      Sql.SaveToFile('C:\EcoCentauro\Consultas\MontaSqlProcurarCliente.Txt');

    Result := sql.Text;
  finally
    FreeAndNil(sql);
  end;
end;

function TCtrlClientes.TableIsEmpty(const Table: string): Boolean;
begin
  Result := True;
  try
    try
      DataModule.DataModule.FDTransacaoPadrao.StartTransaction;
      DataModule.qryConexaoPadrao.Close;
      DataModule.qryConexaoPadrao.SQL.Clear;
      DataModule.qryConexaoPadrao.SQL.Add('Select * From ' + Table );

      if DebugHook <> 0 then
        DataModule.qryConexaoPadrao.SQL.SaveToFile('C:\EcoCentauro\Consultas\TableIsEmpty.Txt');

      DataModule.qryConexaoPadrao.Open;

      Result := DataModule.qryConexaoPadrao.IsEmpty;
    except
      on E: Exception do
      begin
        Result := False;
        DataModule.DataModule.FDTransacaoPadrao.Rollback;
      end;
    end;
  finally
    DataModule.qryConexaoPadrao.Close;
  end;
end;

function TCtrlClientes.ValidarDataNascimento: Boolean;
{
  - Não permitir o cadastro de cliente pessoa física menor de idade para o estado do
  Paraná ou São Paulo. Para os demais estados deixar livre para cadastrar clientes
  pessoas físicas menores de idade.

  - Para o Distrito Federal não permitir o cadastro sem o RG (no caso de pessoa física).
  Para os demais estados deixar o campo opcional.
}
begin
  Result := True;
  if (TipoPessoa = 'F') and ((UF = 'PR') or (FUF = 'SP')) and (StrToInt(Idade(StrToDate(DataNascimento))) < 18) then
     Result := False;
end;

function TCtrlClientes.ValidarRG: Boolean;
begin
  Result := True;
  if (TipoPessoa = 'F') and (UF = 'DF') and (StrToInt(Idade(StrToDate(DataNascimento))) < 18) then
     Result := False;
end;

function TCtrlClientes.GetMensagemInfo: string;
begin
  Result := FMensagemInfo;
end;

function TCtrlClientes.GetDataCadastro: String;
begin
  Result := FDataCadastro;
end;

function TCtrlClientes.GetDataNascimento: String;
begin
  Result := FDataNascimento;
end;

function TCtrlClientes.GetTelefones: String;
begin
  Result := FTelefones;
end;

function TCtrlClientes.GetDocumento: String;
begin
  Result := FDocumento;
end;

function TCtrlClientes.GetEmpresa: String;
begin
  Result := FEmpresa;
end;

function TCtrlClientes.GetId_Cliente: Integer;
begin
  Result := FId_Cliente;
end;

function TCtrlClientes.GetId_Empresa: Integer;
begin
  Result := FId_Empresa;
end;

function TCtrlClientes.GetNome: String;
begin
  Result := FNome;
end;

function TCtrlClientes.GetRG: String;
begin
  Result := FRG;
end;

function TCtrlClientes.GetTipoPessoa: String;
begin
  Result := FTipoPessoa;
end;

function TCtrlClientes.GetUF: String;
begin
  Result := FUF;
end;

procedure TCtrlClientes.SetDataCadastro(const Value: String);
begin
  FDataCadastro := Value;
end;

procedure TCtrlClientes.SetDataNascimento(const Value: String);
begin
  FDataNascimento := Value;
end;

procedure TCtrlClientes.SetTelefones(const Value: String);
begin
  FTelefones := Value;
end;

procedure TCtrlClientes.SetDocumento(const Value: String);
begin
  FDocumento := Value;
end;

procedure TCtrlClientes.SetEmpresa(const Value: String);
begin
  FEmpresa := Value;
end;

procedure TCtrlClientes.SetId_Cliente(const Value: Integer);
begin
  FId_Cliente := Value;
end;

procedure TCtrlClientes.SetId_Empresa(const Value: Integer);
begin
  FId_Empresa := Value;
end;

procedure TCtrlClientes.SetMensagemInfo(const Value: string);
begin
  FMensagemInfo := Value;
end;

procedure TCtrlClientes.SetNome(const Value: String);
begin
  FNome := Value;
end;

procedure TCtrlClientes.SetRG(const Value: String);
begin
  FRG := Value;
end;

procedure TCtrlClientes.SetTipoPessoa(const Value: String);
begin
  FTipoPessoa := Value;
end;

procedure TCtrlClientes.SetUF(const Value: String);
begin
  FUF := Value;
end;

function TCtrlClientes.Processar(Processo: Integer): Boolean;
var
    iId_Cliente : Integer;
begin
   Result := True;
  try
    case Processo of
       1: begin
            iId_Cliente := 0;
            ApplyCdsInsertCliente(iId_Cliente);
          end;
       2: begin
            Result := (MessageDlg('Confirma as Alterações nesse Cliente?', mtConfirmation, [mbYes,mbNo], 0) = mrYes);
            if Result then
              ApplyCdsEditCliente(Id_Cliente);
          end;
       4: begin
            Result := (MessageDlg('Confirma à Excluição desse Cliente?', mtConfirmation, [mbYes,mbNo], 0) = mrYes);
            if Result then
              ApplyCdsDeleteCliente(Id_Cliente);
          end;
    end;
  finally
    if Result then
       ShowMessage('Operação realizada com sucesso!' )
    else
       ShowMessage('Operação cancelada!' )
  end;
end;

function TCtrlClientes.ApplyCdsDeleteCliente(AId_Cliente: Integer): Boolean;
begin
  DataModule.DataModule.FDConexaoPadrao.StartTransaction;
  try
    try
      DataModule.qryConexaoPadrao.Close;
      DataModule.qryConexaoPadrao.SQL.Clear;
      DataModule.qryConexaoPadrao.SQL.Add('Delete From CLIENTES Where (Id_Cliente = ' + IntToStr(AId_Cliente) + ')');

      if DebugHook <> 0 then
        DataModule.qryConexaoPadrao.SQL.SaveToFile('C:\EcoCentauro\Consultas\ApplyCdsDeleteCliente.Txt');

      DataModule.qryConexaoPadrao.ExecSQL;
      DataModule.DataModule.FDConexaoPadrao.Commit;

      Result := True;
    except
      on E: Exception do
      begin
        Result := False;
        DataModule.DataModule.FDConexaoPadrao.Rollback;
      end;
    end;
  finally
    DataModule.qryConexaoPadrao.Close;
  end;
end;

function TCtrlClientes.ApplyCdsEditCliente(AId_Cliente: Integer): Boolean;
var
    DataModule : TdmCliente;
begin
  DataModule := TdmCliente.Create(nil);
  DataModule.DataModule.FDConexaoPadrao.StartTransaction;
  try
    try
      DataModule.qryConexaoPadrao.Close;
      DataModule.qryConexaoPadrao.SQL.Clear;
      DataModule.qryConexaoPadrao.SQL.Add('UpDate CLIENTES ');
      DataModule.qryConexaoPadrao.SQL.Add('Set ID_EMPRESA     = ' + IntToStr(Id_Empresa)      + ', ');
      DataModule.qryConexaoPadrao.SQL.Add('    NOME           = ' + QuotedStr(Nome)           + ', ');
      DataModule.qryConexaoPadrao.SQL.Add('    TIPOPESSOA     = ' + QuotedStr(TipoPessoa)     + ', ');
      DataModule.qryConexaoPadrao.SQL.Add('    TELEFONES      = ' + QuotedStr(Telefones)      + ', ');
      DataModule.qryConexaoPadrao.SQL.Add('    DOCUMENTO      = ' + QuotedStr(Documento)      + ', ');
      DataModule.qryConexaoPadrao.SQL.Add('    RG             = ' + QuotedStr(RG)             + ', ');
      DataModule.qryConexaoPadrao.SQL.Add('    UF             = ' + QuotedStr(UF)             + ', ');
      DataModule.qryConexaoPadrao.SQL.Add('    DATANASCIMENTO = ' + QuotedStr(DataNascimento) + ', ');
      DataModule.qryConexaoPadrao.SQL.Add('    DATACADASTRO   = ' + QuotedStr(DataCadastro)   + '  ');
      DataModule.qryConexaoPadrao.SQL.Add('Where (Id_Cliente  = ' + IntToStr(AId_Cliente)     + ') ');

      if DebugHook <> 0 then
        DataModule.qryConexaoPadrao.SQL.SaveToFile('C:\EcoCentauro\Consultas\ApplyCdsEditCliente.Txt');

      DataModule.qryConexaoPadrao.ExecSQL;
      DataModule.DataModule.FDConexaoPadrao.Commit;
      Result := True;

    except
      on E: Exception do
      begin
        Result := False;
        DataModule.DataModule.FDConexaoPadrao.Rollback;
      end;
    end;
  finally
    DataModule.qryConexaoPadrao.Close;
    FreeAndNil(DataModule);
  end;
end;

function TCtrlClientes.ApplyCdsInsertCliente(var AId_Cliente: Integer): Boolean;
var
   iVezes : Integer;
begin
  DataModule.DataModule.FDConexaoPadrao.StartTransaction;
  try
    AId_Cliente := 0;
    iVezes := 1;
    while (AId_Cliente = 0) and (iVezes <= 5) do
    begin
      DataModule.qryConexaoPadrao.Close;
      DataModule.qryConexaoPadrao.SQL.Clear;
      DataModule.qryConexaoPadrao.SQL.Add('Select gen_id(GEN_CLIENTES_ID, 1) AS SEQUENCE from rdb$database');
      DataModule.qryConexaoPadrao.Open;
      AId_Cliente  := DataModule.qryConexaoPadrao.FieldByName('SEQUENCE').AsInteger;
      Inc(iVezes);
    end;

    if (iVezes >= 5) then
    begin
      Exit;
    end;

    try
      DataModule.qryConexaoPadrao.Close;
      DataModule.qryConexaoPadrao.SQL.Clear;
      DataModule.qryConexaoPadrao.SQL.Add('Insert Into CLIENTES ');
      DataModule.qryConexaoPadrao.SQL.Add('       (ID_CLIENTE, ');
      DataModule.qryConexaoPadrao.SQL.Add('        ID_EMPRESA,    ');
      DataModule.qryConexaoPadrao.SQL.Add('        NOME, ');
      DataModule.qryConexaoPadrao.SQL.Add('        TIPOPESSOA, ');
      DataModule.qryConexaoPadrao.SQL.Add('        TELEFONES, ');
      DataModule.qryConexaoPadrao.SQL.Add('        DOCUMENTO, ');
      DataModule.qryConexaoPadrao.SQL.Add('        RG, ');
      DataModule.qryConexaoPadrao.SQL.Add('        UF, ');
      DataModule.qryConexaoPadrao.SQL.Add('        DATANASCIMENTO, ');
      DataModule.qryConexaoPadrao.SQL.Add('        DATACADASTRO) ');
      DataModule.qryConexaoPadrao.SQL.Add('       ');
      DataModule.qryConexaoPadrao.SQL.Add('Values (' + IntToStr(AId_Cliente)     + ',');
      DataModule.qryConexaoPadrao.SQL.Add(             IntToStr(Id_Empresa)      + ', ');
      DataModule.qryConexaoPadrao.SQL.Add(             QuotedStr(Nome)           + ', ');
      DataModule.qryConexaoPadrao.SQL.Add(             QuotedStr(TipoPessoa)     + ', ');
      DataModule.qryConexaoPadrao.SQL.Add(             QuotedStr(Telefones)      + ', ');
      DataModule.qryConexaoPadrao.SQL.Add(             QuotedStr(Documento)      + ', ');
      DataModule.qryConexaoPadrao.SQL.Add(             QuotedStr(RG)             + ', ');
      DataModule.qryConexaoPadrao.SQL.Add(             QuotedStr(UF)             + ', ');
      DataModule.qryConexaoPadrao.SQL.Add(             QuotedStr(DataNascimento) + ', ');
      DataModule.qryConexaoPadrao.SQL.Add(             QuotedStr(DataCadastro)   + ') ');

      if DebugHook <> 0 then
        DataModule.qryConexaoPadrao.SQL.SaveToFile('C:\EcoCentauro\Consultas\ApplyCdsInsertCliente.Txt');

      DataModule.qryConexaoPadrao.ExecSQL;
      DataModule.DataModule.FDConexaoPadrao.Commit;
      Result := True;

    except
      on E: Exception do
      begin
        Result := False;
        DataModule.DataModule.FDConexaoPadrao.Rollback;
      end;
    end;
  finally
    DataModule.qryConexaoPadrao.Close;
  end;
end;

end.
