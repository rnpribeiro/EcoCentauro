unit fProcurar;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, Buttons, ComCtrls, ExtCtrls, Grids, Db, DBClient, ddmCliente, uSistemaIB,
  DBCtrls, ImgList, DBGrids, System.ImageList;
type
  TfrmProcurar = class(TForm)
    pgProc          : TPageControl;
    TabOpcoes       : TTabSheet;
    TabResultado    : TTabSheet;
    grdOpcoes       : TStringGrid;
    Panel1          : TPanel;
    Panel2          : TPanel;
    btnOk           : TBitBtn;
    BtnCancelar     : TBitBtn;
    BtnSair         : TBitBtn;
    BtnAjuda        : TBitBtn;
    ImageList1      : TImageList;
    dbgrdFBProcurar : TDBGrid;
    btnBtnSair      : TBitBtn;
    btnBtnAjuda     : TBitBtn;
    btnConfirmar    : TBitBtn;
    pnlPesquisar    : TPanel;
    edtPesquisar    : TEdit;
    btnLocalizar    : TBitBtn;
    edtStatus       : TEdit;
    rgTipoPesquisa  : TRadioGroup;

    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);

    procedure btnBtnSairClick(Sender: TObject);
    procedure btnConfirmarClick(Sender: TObject);
    procedure btnLocalizarClick(Sender: TObject);
    procedure dbgrdFBProcurarDblClick(Sender: TObject);
    procedure edtPesquisarKeyPress(Sender: TObject; var Key: Char);
    procedure rgTipoPesquisaClick(Sender: TObject);
    procedure dbgrdFBProcurarKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
    FIdRecno   : Integer;
    FIdRetorno : Integer;
    FNome      : string;

    procedure SetDataSource;
    procedure SetSql(const Value: TStringList);
    procedure SetIdRetorno(const Value: Integer);
    procedure SetNome(const Value: string);
    procedure SetIdRecno(const Value: Integer);
    function ValidarChavePesquisa: Boolean;
  public
    { Public declarations }
    dmCliente  : TdmCliente;
    FSql       : TStringList;

    property Sql: TStringList read FSql write SetSql;
    property IdRecno  : Integer read FIdRecno   write SetIdRecno;
    property IdRetorno: Integer read FIdRetorno write SetIdRetorno;
    property Nome     : string  read FNome      write SetNome;
    property Ativo    : Boolean read FAtivo     write SetAtivo;
  end;

var
   frmProcurar: TfrmProcurar;

implementation

{$R *.DFM}

procedure TfrmProcurar.FormCreate(Sender: TObject);
begin
  FSql := TStringList.Create;
  dmCliente := TdmCliente.Create(Self);
  SetDataSource;
end;

procedure TfrmProcurar.FormShow(Sender: TObject);
begin
  rgTipoPesquisa.ItemIndex := 0;

  dmCliente.cdsConexaoPadrao.Close;
  dmCliente.qryConexaoPadrao.SQL.Clear;
  dmCliente.qryConexaoPadrao.SQL.Text := FSql.Text;
  dmCliente.cdsConexaoPadrao.Open;
  if dmCliente.cdsConexaoPadrao.IsEmpty then
  begin
    ShowMessage('Não Existe(m) registro(s) para selecionar!');
    ModalResult := mrCancel;
  end;
end;

procedure TfrmProcurar.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  dmCliente.cdsConexaoPadrao.Close;
  FreeAndNil(FSql);
  FreeAndNil(dmCliente);
end;

procedure TfrmProcurar.SetIdRetorno(const Value: Double);
begin
  FIdRetorno := Value;
end;

procedure TfrmProcurar.SetNome(const Value: string);
begin
  FNome := Value;
end;

procedure TfrmProcurar.SetSql(const Value: TStringList);
begin
  FSql := Value;
end;

procedure TfrmProcurar.SetDataSource;
begin
  dbgrdFBProcurar.DataSource  := dmCliente.dsConexaoPadrao;
end;

procedure TfrmProcurar.btnBtnSairClick(Sender: TObject);
begin
  ModalResult := mrAbort;
end;

procedure TfrmProcurar.btnConfirmarClick(Sender: TObject);
begin
  FIdRecno    := dbgrdFBProcurar.DataSource.DataSet.RecNo;
  FIdRetorno  := dbgrdFBProcurar.DataSource.DataSet.FieldByName('IDRETORNO').AsFloat;
  FDescricao  := dbgrdFBProcurar.DataSource.DataSet.FieldByName('DESCRICAO').AsString;
  FAtivo      := dbgrdFBProcurar.DataSource.DataSet.FieldByName('ATIVO').AsString = 'S';
  ModalResult := mrOk;
end;

procedure TfrmProcurar.btnLocalizarClick(Sender: TObject);
var
   Found: Boolean;
begin
  Found := False;
  ValidarChavePesquisa;
  case rgTipoPesquisa.ItemIndex of
    0: Found := dmCliente.cdsConexaoPadrao.Locate('DESCRICAO' , edtPesquisar.Text, [loPartialKey]);
    1: Found := dmCliente.cdsConexaoPadrao.Locate('IDRETORNO' , edtPesquisar.Text, [loPartialKey]);
  end;
  edtStatus.Enabled := True;
  if Found then
    edtStatus.Text := 'Found'
  else
    edtStatus.Text := 'Not Found';
  edtStatus.Enabled := False;
  dbgrdFBProcurar.Columns.Grid.SetFocus;
end;

procedure TfrmProcurar.dbgrdFBProcurarDblClick(Sender: TObject);
begin
  btnConfirmar.Click;
end;

procedure TfrmProcurar.edtPesquisarKeyPress(Sender: TObject;  var Key: Char);
begin
  if Key = #13 then
  begin
    btnLocalizar.Click;
  end;
end;

function TfrmProcurar.ValidarChavePesquisa: Boolean;
var
    sChavePesquisa : string;
begin
  Result := True;
  sChavePesquisa := Trim(edtPesquisar.Text);
  case rgTipoPesquisa.ItemIndex of
    0: begin
         if (IsNumber(sChavePesquisa)) then
         begin
           rgTipoPesquisa.ItemIndex := 1;
           edtPesquisar.Text := sChavePesquisa;
           edtPesquisar.Repaint;
           edtPesquisar.Refresh;
         end;
       end;
    1: Begin
         if (IsLetter(sChavePesquisa)) then
         begin
           rgTipoPesquisa.ItemIndex := 0;
           edtPesquisar.Text := sChavePesquisa;
           edtPesquisar.Repaint;
           edtPesquisar.Refresh;
         end;
       end;
  else ;
     Result := False;
  end;
end;

procedure TfrmProcurar.rgTipoPesquisaClick(Sender: TObject);
begin
  edtPesquisar.Text       := '';
  edtPesquisar.CharCase   := ecUpperCase;
  edtPesquisar.Enabled    := True;
  edtPesquisar.SetFocus;
  btnLocalizar.Caption    := '';
  btnLocalizar.Enabled    := True;
end;

procedure TfrmProcurar.SetIdRecno(const Value: Integer);
begin
  FIdRecno := Value;
end;

procedure TfrmProcurar.dbgrdFBProcurarKeyPress(Sender: TObject;
  var Key: Char);
begin
  if key = #13 then
    btnConfirmar.Click;
end;

procedure TfrmProcurar.SetAtivo(const Value: Boolean);
begin
  FAtivo := Value;
end;
end.
