unit dDMConection;

interface

uses MidasLib, Windows, Messages,SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  DB,  SqlExpr, DBClient, Provider,
  FMTBcd, TConnect, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, FireDAC.Comp.UI,
  FireDAC.Phys.IBBase, FireDAC.Comp.Client,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Phys.ODBCDef, FireDAC.Phys.ODBC, FireDAC.Phys.ODBCBase,
  FireDAC.Comp.DataSet, Data.DBXFirebird;

const
  LogAlias = 'ECO_LOG_TRN';
type
  TConnectionState = (csInTransaction, csCommited, csRolledBack, csNone);
  TDMConection = class(TDataModule)
    FDTransacaoPadrao: TFDTransaction;
    FDConexaoPadrao: TFDConnection;
    qryConexaoPadrao: TFDQuery;
    qryAuxiliar: TFDQuery;
    qryEstado: TFDQuery;
    qryEmpresa: TFDQuery;
    qryCliente: TFDQuery;
    qryTelefone: TFDQuery;
    qryTipoTelefone: TFDQuery;
    procedure DMConectionCreate(Sender: TObject);
    procedure DataModuleDestroy(Sender: TObject);
  private
    FsNomeApp: string;
    FEstado: TConnectionState;
    FContadorTransacao: integer;
    bLogAvisaTrans: boolean;
  public
    property estado: TConnectionState read festado;

    procedure IniciaTransacao;
    procedure CommitaTransacao;
    procedure CancelaTransacao;

    function EmTransacao: boolean;
  end;

var
  DMConection: TDMConection;
  bGeraLog: boolean;

implementation


{$R *.DFM}

procedure TDMConection.DMConectionCreate(Sender: TObject);
begin
  FDConexaoPadrao.Open;
end;

procedure TDMConection.CommitaTransacao;
var
  TD: TTransactionDesc;

begin
  Dec(FContadorTransacao);

  if FDConexaoPadrao.InTransaction then
  begin
    TD.TransactionID := 1;
    TD.IsolationLevel := xilREADCOMMITTED;
    FEstado := csCommited;
  end;
end;

procedure TDMConection.IniciaTransacao;
var
  TD: TTransactionDesc;

begin
  if (not FDConexaoPadrao.InTransaction) then
  begin
    TD.TransactionID := 1;
    TD.IsolationLevel := xilREADCOMMITTED;
  end;
  FEstado := csInTransaction;
  Inc(FContadorTransacao);

  if (bLogAvisaTrans) and (FContadorTransacao > 1) then
    ShowMessage('Atenção !!!' + #13 + 'Existem ' + IntToStr(FContadorTransacao) + ' transações abertas até o momento !');
end;

procedure TDMConection.CancelaTransacao;
var
  TD: TTransactionDesc;
begin
  TD.TransactionID := 1;
  TD.IsolationLevel := xilREADCOMMITTED;
  if FDConexaoPadrao.InTransaction then
  FEstado := csRolledBack;
  FContadorTransacao := 0;
end;

procedure TDMConection.DataModuleDestroy(Sender: TObject);
var i: Integer;
begin
  for i := 0 to ComponentCount - 1 do
    if (Components[i] is TDataSet) and (Components[i].Tag = 0)
      then
      (Components[i] as TDataSet).Active := False;
  FDConexaoPadrao.Close;
end;

function TDMConection.EmTransacao: boolean;
begin
  result := FDConexaoPadrao.InTransaction;
end;

end.



