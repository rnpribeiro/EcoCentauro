unit uFuncoes;

interface

uses
  Windows, Messages, SysUtils,Types, MaskUtils, FileCtrl, Classes, Graphics, System.UITypes;

const

    b_AceitaVazio : Boolean = True;
    k_vazio       : string  = '';
    k_Ponto       : string  = '.';
    k_virgula     : string  = ',';

type

   TUtils = class
     class function Iif<T>(Condition: Boolean; T1, T2 : T):T;
   end;

   TFuncoes = class
   private
   public

      constructor Create;
      destructor Destroy; override;

      class function IsLetter(Text: String): Boolean;
      class function IsNumber(Text: String): Boolean;
      class function RetirarMascara(Value: string): string;
      class function MascaraCPF(Value): string;
      class function MascaraCNPJ(Value): string;
      class function ValidarCNPJ(sCNPJ: string): boolean;
      class function ValidarCPF(sCPF: string): boolean;
      class function KeyDate(var Key: char): Boolean;


   end;

implementation

{ TFuncoes }

constructor TFuncoes.Create;
begin

end;

destructor TFuncoes.Destroy;
begin
  inherited;
end;

class function TFuncoes.IsLetter(Text: String): Boolean;
var
    I : Integer;
    s : string;
    X : Char;
begin
  Result := True;
  for I := 1 to Length(Text) do
  begin
    S := UpperCase(Copy(Text,I,1));
    X := S[1];
      Result := (Pos(X, '+,-,.,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z') > 0);
      if not Result then
        Break;
  end;
end;


class function TFuncoes.IsNumber(Text: String): Boolean;
var
    I : Integer;
    S : string;
    X : Char;
begin
  Result := True;
  for I := 1 to Length(Text) do
  begin
    S := Copy(Text,I,1);
    X := S[1];
    if (X <> '.') and (X <> ',') then
      Result := (Pos(X, '+,-,1,2,3,4,5,6,7,8,9,0') > 0)
    else
      Result := True;

    if not Result then
      Break;
  end;
end;

class function TFuncoes.KeyDate(var Key: char): Boolean;
begin
  if key <> #8 then
  begin
    Result := (Pos(Key, '/,1,2,3,4,5,6,7,8,9,0') > 0);
    if not Result  then
      key :=#0;
  end;
end;

class function TFuncoes.MascaraCNPJ(Value: string): string;
begin
CNPJ: FormatMaskText('00\.000\.000\/0000\-00;0;', '11111111111111')
end;

class function TFuncoes.MascaraCPF(Value: string): string;
begin
  CPF: FormatMaskText('000\.000\.000\-00;0;', '11111111111')

end;

class function TFuncoes.RetirarMascara(Value: string): string;
var
  iConta : integer;
  iTam   : integer;
  sChar  : string;
begin
  Result := ''
  iTam   := length(Value);
  for iConta := 1 to iTam do
  begin
    sChar := copy(sCNPJ, iConta, 1);
    if pos(sChar, '1234567890') <> 0 then
      Result := Result + sChar;
  end;
end;

class function TFuncoes.ValidarCNPJ(sCNPJ: string): boolean;
var
  sPeso  : string;
  sDig   : string;
  sChar  : string;
  sAntes : string;
  iConta : integer;
  iSoma  : integer;
  iTam   : integer;
  iDig   : integer;
  iDv    : integer;
begin
  Result := false;
  try
    sPeso  := '6543298765432';
    iTam   := length(sCNPJ);
    sDig   := '';

    for iConta := 1 to iTam do
    begin
      sChar := copy(sCNPJ, iConta, 1);
      if pos(sChar, '1234567890') <> 0 then
        sDig := sDig + sChar;
    end;

    if length(sDig) <> 14 then
      Exit;

    sAntes := sDig;
    sDig   := copy(sDig, 1, 12);

    for iDig := 1 to 2 do
    begin
      iSoma := 0;
      iTam  := 11 + iDig;
      for iConta := 1 to iTam do
        iSoma := iSoma + (StrtoInt(copy(sDig, iConta, 01)) * StrtoInt(copy(sPeso, 02 - iDig + iConta, 01)));

      iDv := iSoma mod 11;
      if iDv < 2 then
        sDig := sDig + '0'
      else
        sDig := sDig + InttoStr(11 - iDv);

    end;
  finally
    Result := (sDig = sAntes);
  end;

end;

class function TFuncoes.ValidarCPF(sCPF: string): boolean;
var
  iSoma: integer;
  sChar, Z: string;
  sDigito: string;
  iDigito: integer;
  X, Y, I: integer;
begin
  Result := false;
  try
    for i := 1 to Length(sCPF) do
      if (copy(sCPF, I, 1) <> '.') and (copy(sCPF, I, 1) <> '-') then
        Z := Z + copy(sCPF, I, 1);

    sDigito := copy(Z, 01, 09);

    for Y := 1 to 2 do
    begin
      iSoma := 0;
      for X := 1 to 08 + Y do
      begin
        sChar := copy(sDigito, X, 1);
        if sChar = ' ' then
        begin
          Result := false;
          Exit;
        end;
        iSoma := iSoma + StrtoInt(sChar) * (10 + Y - X);
      end;
      iDigito := iSoma mod 11;
      if iDigito < 2 then
        sDigito := sDigito + '0'
      else
        sDigito := sDigito + InttoStr(11 - iDigito);
    end;
  finally
    Result := (sDigito = Z);
  end;
end;

{ TUtils }

class function TUtils.Iif<T>(Condition: Boolean; T1, T2: T): T;
begin
  if Condition then
     Result := T1
  else
     Result := T2;
end;

end.
