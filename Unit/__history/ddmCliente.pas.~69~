unit ddmCliente;

interface

uses Midas, SysUtils, Classes, DB, DBClient, FMTBcd, Provider, SqlExpr, dDMConection, Messages, Dialogs,
     FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
     FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
     FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, FireDAC.Comp.UI,
     FireDAC.Phys.IBBase, FireDAC.Comp.Client,
     FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
     FireDAC.Phys.ODBCDef, FireDAC.Phys.ODBC, FireDAC.Phys.ODBCBase,
     FireDAC.Comp.DataSet, FireDAC.Stan.Intf;


const
  b_AceitaVazio : Boolean = True;
  k_vazio       : string  = '';
  k_Zero        : string  = '0';
  k_Ponto       : string  = '.';
  k_virgula     : string  = ',';

type
  TdmCliente = class(TDataModule)
    dsConexaoPadrao                                   : TDataSource;
    cdsConexaoPadrao                                  : TClientDataSet;
    dspConexaoPadrao                                  : TDataSetProvider;
    qryConexaoPadrao                                  : TSQLQuery;

    dsAuxiliar                                        : TDataSource;
    cdsAuxiliar                                       : TClientDataSet;
    dspAuxiliar                                       : TDataSetProvider;
    qryAuxiliar                                       : TSQLQuery;

    dsEstado                                          : TDataSource;
    dspEstado                                         : TDataSetProvider;
    cdsEstado                                         : TClientDataSet;
    qryEstado                                         : TSQLQuery;

    dsEmpresa                                         : TDataSource;
    qryEmpresa                                        : TSQLQuery;
    dspEmpresa                                        : TDataSetProvider;
    cdsEmpresa                                        : TClientDataSet;

    dsCliente                                         : TDataSource;
    qryCliente                                        : TSQLQuery;
    dspCliente                                        : TDataSetProvider;
    cdsCliente                                        : TClientDataSet;

    dsTelefone                                        : TDataSource;
    qryTelefone                                       : TSQLQuery;
    dspTelefone                                       : TDataSetProvider;
    cdsTelefone                                       : TClientDataSet;

    dsTipoTelefone                                    : TDataSource;
    qryTipoTelefone                                   : TSQLQuery;
    dspTipoTelefone                                   : TDataSetProvider;
    cdsTipoTelefone                                   : TClientDataSet;

    intgrfldEstadoID_ESTADO                           : TIntegerField;
    strngfldEstadoSIGLA                               : TStringField;
    strngfldEstadoNOME                                : TStringField;
    intgrfldEstadoIBGE                                : TIntegerField;

    intgrfldEmpresaID_EMPRESA                         : TIntegerField;
    strngfldEmpresaNOMEFANTASIA                       : TStringField;
    strngfldEmpresaCNPJ                               : TStringField;
    strngfldEmpresaUF                                 : TStringField;

    intgrfldClienteID_CLIENTE                         : TIntegerField;
    intgrfldClienteID_EMPRESA                         : TIntegerField;
    strngfldClienteNOME                               : TStringField;
    strngfldClienteTIPOPESSOA                         : TStringField;
    strngfldClienteDOCUMENTO                          : TStringField;
    strngfldClienteRG                                 : TStringField;
    strngfldClienteUF                                 : TStringField;
    dtfldClienteDATANASCIMENTO                        : TDateField;
    sqltmstmpfldClienteDATACADASTRO                   : TSQLTimeStampField;

    intgrfldTelefoneID_TELEFONE                       : TIntegerField;
    intgrfldTelefoneID_CLIENTE                        : TIntegerField;
    strngfldTelefoneDDD                               : TStringField;
    strngfldTelefoneTELEFONE                          : TStringField;
    strngfldTelefoneRAMAL                             : TStringField;
    intgrfldTelefoneID_TIPO                           : TIntegerField;
    strngfldTelefoneDESCRICAO                         : TStringField;

    intgrfldTipoTelefoneID_TIPO                       : TIntegerField;
    strngfldTipoTelefoneDESCRICAO                     : TStringField;

    procedure DataModuleCreate(Sender: TObject);
    procedure dspAlunoNotaAfterUpdateRecord(Sender: TObject; SourceDS: TDataSet; DeltaDS: TCustomClientDataSet; UpdateKind: TUpdateKind);

  private
    { Private declarations }
  public
    { Public declarations }
    DataModule : TDMConection;

    function FazerQuery(sSql: string): Boolean;
    procedure LockRows(qry: TFDQuery; wait: boolean);
  end;

var
  dmCliente: TdmCliente;

implementation

{$R *.dfm}

procedure TdmCliente.DataModuleCreate(Sender: TObject);
begin
  DataModule                     := TDMConection.Create(Self);
//  qryConexaoPadrao.SQLConnection := DataModule.ConexaoPadrao;
//  qryAuxiliar.SQLConnection      := DataModule.ConexaoPadrao;
//  qryEstado.SQLConnection        := DataModule.ConexaoPadrao;
//  qryEmpresa.SQLConnection       := DataModule.ConexaoPadrao;
//  qryCliente.SQLConnection       := DataModule.ConexaoPadrao;
//  qryTelefone.SQLConnection      := DataModule.ConexaoPadrao;
//  qryTipoTelefone.SQLConnection  := DataModule.ConexaoPadrao;
end;

procedure TdmCliente.dspAlunoNotaAfterUpdateRecord(Sender: TObject;
  SourceDS: TDataSet; DeltaDS: TCustomClientDataSet; UpdateKind: TUpdateKind);
var
    sReadOnly: string;
begin
  if SourceDS.Fields[19].ReadOnly  then
     sReadOnly := 'Está ReadOly'
  else
     sReadOnly := 'Não Está ReadOly';
  try

  except
    on E: Exception do
    begin
      MessageDlg(E.Message + ', ' + sReadOnly, mtInformation, [mbOk], 0);
    end;
  end;
end;

function TdmCliente.FazerQuery(sSql: string): Boolean;
begin
  try
    dmCliente.cdsConexaoPadrao.Close;
    dmCliente.qryConexaoPadrao.Sql.Clear;
    dmCliente.qryConexaoPadrao.SQL.Text := sSql;
    dmCliente.cdsConexaoPadrao.Open;
    Result := not dmCliente.cdsConexaoPadrao.IsEmpty;
  except
    Result := False;
  end;
end;

procedure TdmCliente.LockRows(qry: TFDQuery; wait: boolean);
begin
  if DataModule.ConexaoPadrao.InTransaction then
  begin
    if wait then
      qryConexaoPadrao.Sql.Add(' FOR UPDATE ')
    else
      qryConexaoPadrao.sql.Add(' FOR UPDATE NOWAIT ');
  end;
end;

end.
